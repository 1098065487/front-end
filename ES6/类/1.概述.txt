传统js中，类的实现是通过构造函数，去实例化对象，类的继承，是通过原型链（属性的继承通过构造方法，方法的继承通过原型链）。

ES6开始，引入class，让类的写法，更接近传统的面向对象语言（如C++和Java）

但其实，ES6的class可以看作是语法糖，只是写法接近传统面向对象语言，实际的实现，还是es5那种思想，构造+原型链。(类的本质就是构造函数，Class === Class.prototype.constructor)

类的构造方法和其他方法都是定义在原型对象（prototype）上，这样类实例化的对象，其__proto__指向类的原型对象，从而获取全部方法。
唯一不同的，class定义类内部自定义的方法，都不可枚举（不能通过Object.keys()获取到），这和es5不同，es5定义在原型链上的自定义方法（构造方法不可枚举），都可以枚举

标准写法：
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    toString() {
        return `${this.x}, ${this.y}`;
    }
}
let a = new Point(3, 3);