const asyncPool = async (limit, array, func) => {
  const result = [];
  const executing = [];
  for(let item of array) {
    console.log('循环', item);
    const promise = Promise.resolve().then(() => { console.log('初始化', item); return func(item, array) });
    result.push(promise);
    if(limit <= array.length) {
      const newPromise = promise.then(() => executing.splice(executing.indexOf(newPromise), 1));
      executing.push(newPromise);
      if(executing.length >= limit) {
        console.log('运行Promise.race');
        await Promise.race(executing);
      }
    }
  }
  return Promise.all(result);
}

const timeout = i => {
  return new Promise(resolve => { setTimeout(resolve, i, i) })
}

const main = async () => {
  const aa = await asyncPool(3, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], timeout);
  console.log('aa-----', aa);
}

main();