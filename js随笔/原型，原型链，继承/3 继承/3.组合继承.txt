思想：组合原型链继承和借用构造函数继承
          使用原型链实现对父类型原型对象的继承，借用构造函数实现对父类型自身属性和方法的继承
function Parent(name) {
    this.name = name;
    this.colors = ['red', 'blue'];
}
Parent.prototype.getName = function() { console.log(this.name) };
function Child(name, age) {
    Parent.call(this, name);    // 构造继承属性，调用一次父类型构造
    this.age = age;
}
Child.prototype = new Parent();    // 通过原型链继承方法，又调用一次父类型构造
Child.prototype.constructor = Child;
Child.prototype.getAge = function() { console.log(this.age) };
var child1 = new Child('Tom', 18);
var child2 = new Child('jerry', 20);

组合继承是js中最常用的继承模式，不过两次调用父类构造可以优化，思想不需要改变
