思想：定义子类型的原型对象，指向父类型的实例，使子类型的实例能通过原型链的查找，获取父            类型的属性和方法。

function Parent() {
    this.name = 'Tom';
    this.tips = ['11', '22'];
}
Parent.prototype.getName = function() { console.log(this.name) };
function Child() {}
Child.prototype = new Parent;    // 子类型的原型对象指向父类型的实例
var child1 = new Child();
child1.getName();    // Tom

child1.tips.push('33');      // 缺点1
child1.tips     //  ['11', '22', '33']
var child2 = new Child();
child2.tips     //  ['11', '22', '33']

存在缺点：
1.父类型的引用类型属性，会被所有实例共享（如上）（原型链查到的引用地址是一样的）
2.在创建子类型实例时，不能向父类型构造传参（传参可实现同属性不同属性值）