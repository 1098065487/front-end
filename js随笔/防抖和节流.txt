在某些情况下，会有频繁操作的情况，比如输入框的onChange事件，比如浏览器的srcoll事件，如果涉及到接口的调用，这些频繁操作就会增加接口调用或浏览器负担，造成性能问题。

一般这种情况，会采用debounce（防抖）和throttle（节流）的方式减少调用频率。

函数防抖debounce：当持续触发事件的时候，在一段时间内没有触发事件，事件处理函数才会再次                               执行一次，如果设定时间内，又触发事件，重新开始延时。
function debounce(fn, wait) {
    var timeout = null;
    return function() {
        if(timeout !== null) { clearTimeout(timeout) };
        var that = this;
        var args = arguments;
        timeout = setTimeout(fn.apply(that, args), wait);
    }
}
function handle() { ... }
debounce(handle, 1000);
函数仅在触发事件后1000ms后，没有再次触发事件才会调用一次，之前一直没有执行。

函数节流throttle：当持续触发事件时，保证一定时间段内只能调用一次处理函数
节流实现主要有两种方式：时间戳和定时器
时间戳：
var throttle = function(fn, delay) {
    var prev = Date.now();
    return function() {
        var context = this;
        var args = arguments;
        var now = Date.now();
        if(now - prev >= delay) {
            fn.apply(context, args);
            prev = Date.now();
        } 
    }
}

定时器：
var throttle = function(fn, delay) {
    var timer = null;
    return function() {
        var context = this;
        var args = arguments;
        if(!timer) {
            timer = setTimeout(function() {
                fn.apply(context, args);
                timer = null;
            }, delay)
        }
    }
}

时间戳+定时器：
var throttle = function(fn, delay) {
    var timer = null;
    var startTime = Date.now();
    return function() {
        var curTime = Date.now();
        var remain = delay - (curTime - startTime);
        var context = this;
        var args = arguments;
        clearTimeout(timer);
        if(remain < 0) {
            fn.apply(context, args);
            startTime = Date.now();
        } else {
            timer = setTimeout(fn, remaining);
        }
    }
}
和防抖类似，throttle(handle, 1000);

总结：
1）函数防抖和函数节流都是防止一段时间内频繁触发，但是原理不同：
     函数防抖是某一段时间内只执行一次，函数节流是固定间隔时间执行。
2）debounce场景：搜索框请求资源，windows触发resize
3）throttle场景：鼠标不断点击，监听滚动到底部加载更多

关于手写一个防抖的函数，在不考虑通用的情况下，可以简单理解，在函数外定义一个timeout，每次执行timeout非null，则清空，否则就给timeout设置延迟函数，达到防抖效果