1.概念：事件冒泡和捕获，都是事件流（事件发生顺序）的概念
事件冒泡：事件从最内层的元素开始发生，并一直向上传播，直到document对象
事件捕获：事件从最外层（document）开始发生，并向内直到具体元素

2.addEventListener(event, function, useCapture)
addEventListener是一个事件处理函数，前两个参数必选，分别是要监听的事件和处理方法，第三个参数可选，true表示事件捕获执行，false表示事件冒泡执行，默认false

3.事件流的作用：事件代理
可以通过addEventListener给dom元素添加事件监听，但是有些情况，直接添加并不合适，比如给ul内多个li添加点击事件监听，这是更优的做法是将事件提升至ul上，利用事件流，传递给li，再根据判断（一般是通过e | window.event），当传递到li时，执行绑定的方法
一般对事件流的使用，更推荐事件冒泡，兼容性更好，比如IE9以前不支持addEventListener，可以使用attachEvent，但是这种方式只支持冒泡调用函数

4.阻止行为
在某些场景下，事件流反而会带来不期待的操作，因此需要阻止行为
1）阻止事件冒泡，一般用在嵌套的dom结构上，内外层都绑定了事件的监听，不期待都触发的情况，需要阻止内层事件冒泡到外层
2）阻止默认行为，最常见的a标签的点击会有跳转行为，在点击事件上，添加阻止默认行为，阻止默认的跳转，还有自定义的事件，可能会受默认事件干扰，这时也要阻止默认行为

5.阻止行为具体操作：
1）阻止冒泡，不阻止默认行为：stopPropagation，cancelBubble
2）阻止默认行为，不阻止冒泡：preventDefault
3）同时阻止冒泡和默认行为：return false

阻止冒泡还有一种方式，将事件处理函数内容，写进判断中，判断event.target === event.currentTarget，也就是判断触发事件元素等于绑定事件的元素才进行操作