1.浏览器的硬件加速
1）浏览器GPU进程，GPU是专门做图形渲染的芯片，做：绘制位图到屏幕上，对图片进行处理（位     置变化，旋转，缩放）
2）浏览器每个页面标签都是一个独立的render进程，其中包括主线程和合成线程
3）主线程包括js执行，css计算，layout计算，将元素绘制成位图（paint），发送位图给合成线程
4）合成线程包括将位图发给GPU，计算页面可见和即将可见部分（滚动），通知GPU绘制位图到屏     幕上（draw）
5）页面绘制包括layout，paint，合成。layout负责计算dom布局，paint负责dom绘制成位图，合     成则负责将位图发送给GPU绘制到屏幕上
6）GPU硬件加速，指浏览器为开启硬件加速的dom节点单独创建一个层，此层更新不印象其他层，     所以开启硬件加速的动画会变得流畅很多
在适当使用硬件加速的情况下，页面动画的确会变的更加流畅，但是滥用的时候，网页整体性能反而会下降，因为每个层都有自己的上下文对象和位图，会消耗内存，硬件加速滥用，内存会不够导致崩溃

2.css动画优化
1）在动画中减少会引起layout和paint的操作，如不使用会触发layout和paint的css
2）控制层的数量和层paint的次数，如无限滚动列表，复用移出可是区域的列表项，只更新里面的数据，然后作为新增列表项进入用户视野，固定层的数量

3.总结：css动画优化：
1）动画中尽量少使用触发layout和paint的css，使用更低耗的transform，opcity等
2）尽量减少或固定层的数量，不在动画过程中创建层
3）尽量减少层的更新（paint）次数