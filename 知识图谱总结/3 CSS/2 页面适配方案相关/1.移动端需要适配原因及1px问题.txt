1.原因：
不同设备有自己的物理像素（屏幕分辨率）和设备独立像素（屏幕像素大小），他们的比值为设备像素比（device pixel ratio）dpr，目前移动端设备都可以根据设备像素比，来更好的展示页面，不至于页面在高设备像素比（一般移动端屏幕大小不会差太多，但是分辨率可以差很多）下过小

此时的页面，可能会带来一些兼容问题，如经典的1px问题
原因：设计在设计时，移动端一般都是给2倍图，更贴合现在的设备，2倍图下的边框线1px，实际逻辑像素是0.5px，这时有两种情况均会导致1px问题：
1.由于浏览器不支持0.5px的识别，会丢失border，直接用1px去实现，就会跟设计比更粗
2.添加了移动端自适应方案的，可以实现以二倍图的尺寸去适配，但有的浏览器仍不支持适配后自己算出来的0.5px，会以最小1px去代替，还是会觉得变粗（讲道理这种情况应该不存在，适配计算是可以的）

在web浏览器中，可以根据window.devicePixelRatio获取dpr
在css中，可以根据媒体查询min-device-pixel-ratio区分dpr
@media(-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) { ... }
在react native中，可以使用PixelRatio.get()来获取dpr  

2.1px问题的解决办法
1）使用border-image或background-image代替边框线，根据媒体查询dpr，使用不同的border-image
缺点：圆角边框会在圆角处模糊，border是图片，颜色一变图片就得换    

2）使用伪元素添加边框线，配合transform缩放，模拟实现1px边框线
1》1条border
.setOnePx {
  position: relative;
  &::after {
    position: absolute;
    content: '';
    display: block;
    width: 100%;
    height: 1px;
    transform: scale(1, 0.5);
    top: 0;
    left: 0;
  }
}
先使用伪元素创建height为1的区域，绝对定位到元素相关位置，沿Y轴缩小0.5

2》4条border
.setBorderAll{
     position: relative;
       &:after{
           content:" ";
           position:absolute;
           top: 0;
           left: 0;
           width: 200%;
           height: 200%;
           transform: scale(0.5);
           transform-origin: left top;
           box-sizing: border-box;
           border: 1px solid #E5E5E5;
           border-radius: 4px;
      }
    }        
先使用伪元素在目标元素后创建一个宽高皆为目标两倍的盒子，设置好border，绝对定位到目标左上角，再整体缩小0.5    

3）添加移动端适配方案，并修改viewport实现
将页面的实现基于适配方案，如flexible（rem）或vw，通过设置缩放，设计的1px实际就为设备1px，按照设计计算的rem或vw来写，计算出的仍是和设计一致即可                                         
                                                                                                    