1.浏览器渲染机制
1）浏览器采用流式布局模型（Flow Based Layout）
2）浏览器会将html解析成dom，把css解析成cssom，dom和cssom合并产生渲染树(render tree)
3）有了render tree，知道所有节点的样式，就可以计算他们在页面的大小和位置，将节点绘制到页面上
4）由于浏览器使用流式布局，对render tree的计算通常只要遍历一次就可以完成（table除外，可能需要多次计算，通常要花3倍于同等其他元素的时间，所以要避免table布局）

2.重绘：
由于节点样式发生改变且不影响布局，导致的页面变化叫重绘，如visibility，color变化，重绘代价高昂，因为浏览器会验证dom树的其他节点的可见性（visibility）

3.回流：
回流是布局发生变化，可能是节点几何属性或者影响布局的样式变化，导致的页面变化。回流是影响浏览器性能的关键因素，因为变化设计部分页面或整个页面的布局，一个元素的回流可能导致其所有子元素以及dom后面部位的节点，祖先节点的跟随回流（大部分回流会导致页面重新渲染）

4.重绘和回流的关系：
回流必然导致重绘，重绘不一定引发回流

5.浏览器优化
现代浏览器大多通过队列机制来批量更新布局，浏览器把修改操作放在队列中，至少一个刷新才会清空队列，但当获取布局信息时，浏览器会强制清空队列，触发回流和重绘来确保返回正确的值
主要有一下属性和方法：
offsetTop, offsetLeft, offsetWidth, offsetHeight
scrollTop, scrollLeft, scrollWidth, scrollHeight
clientTop, clientLeft, clientWidth, clientHeight
width, height
getComputedStyle(), getBoundingClientRect()
应当避免频繁使用上述属性方法，因为会强制页面渲染，刷新队列

6.减少重绘和回流
1）css注意
1》使用transform代替top
2》使用visibility代替display: block;，前者只会引起重绘，后者会引起回流
3》避免使用table布局，很小的改动可能造成整个table重新布局
4》尽可能在dom树末端修改class，回流不可避免，但可以减小影响，末端修改可以限制回流范围，使其尽可能少的影响节点
5》避免设置多层级样式，css选择符从右往左匹配查找，避免节点层级过多
6》将动画效果应用到固定定位的元素上，避免影响其他元素的布局，变化仅是重绘，不会回流
7》避免使用css表达式，可能会引起回流
8》将繁重的重绘或回流节点设置为图层，video,iframe等标签，可以阻止渲染影响其他节点
9》css3硬件加速（GPU加速），GPU加速可以让transform，opacity，filters动画不会引起回流重绘，即使是仍会引发回流重绘的，还是可以提升动画性能

2）js注意
1》避免频繁操作样式，可以一次重写style，也可以将增删改class
2》避免频繁操作dom，可以通过documentFragment作为中间量，所有dom操作放他上面，最后应用到文档上
3》避免频繁读取会引发重绘回流的属性，确实要多次使用的，可以用变量缓存