1.callback
对事件添加回调函数，事件执行完后，会调用回调函数，就相当于完成异步操作
但是对于事件的嵌套，回调的写法更加繁琐，难读，回调地狱是明显的缺点，一般不适用

2.Promise
Promise针对回调的嵌套问题做了优化，then()方法支持链式调用，且执行顺序和定义顺序一致，消除回调地狱的缺点
优点：
1）代码更符合逻辑，可读性更好
2）Promise没有改变JS异步的本质，写法上更接近callback
缺点：
链式调用过程中，一旦一个执行报错，直接catch出去

3.Generator
我们更希望以同步方式写异步代码，使逻辑更清晰，代码量更少，为此又有了Generator方案

Generator 比 callback 和 Promise 更难理解，他是基于Generator函数用next()方法调用时，存在暂停效果去实现异步的
特点：
1）定义Generator函数，使用function*
2）使用时，调用generator函数会返回generator对象
3）执行next()方法，执行generator代码，直至遇到yield，返回此时执行结果并暂停，会记住此时的执行上下文，供下次执行next()执行

4.async/await
可以看出来generator函数虽然时同步方式写的异步代码，但是写法复杂，并不好用，于是有了更简单使用的async/await方式
特点：
1）async声明放在函数前，表明是异步函数，await只能在异步函数中使用
2）await表示等待await后的操作执行完毕，再执行后面的代码
3）await后面最好是一个耗时操作或异步操作
4）await后面必须是一个Promise对象，不是也会默认转换成Promise

其实，本质上async/await就是基于promise和generator的语法糖