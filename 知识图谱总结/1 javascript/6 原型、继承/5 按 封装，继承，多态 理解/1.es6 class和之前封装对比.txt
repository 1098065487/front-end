1.综述
1）es6之前，封装靠的的构造函数（内部使用了原型和原型链的概念）
2）es6以后，封装靠的是class（其实也就是构造函数的语法糖）

2.es6前的封装  --  构造函数
2.1 私有属性，公有属性，静态属性
1）私有属性和方法，在构造函数内使用var声明的属性，只能在构造函数内被访问
2）公有属性和方法，在构造函数内用this设置（this.xxx），或者定义在构造函数原型对象（Func.prototype.xxx）上的属性，可以在构造函数外通过实例对象访问到
3）静态属性和方法，定义在构造函数上（Func.xxx），可以通过构造函数直接访问

2.2 实例对象上的属性和构造函数原型上的属性（都是公有属性和方法）
1）在构造函数内使用this设置（this.xxx）的属性
     定义在构造函数原型对象上的属性（Func.prototype.xxx）
2）定义在构造函数原型上的属性和方法，虽然不直接在实例对象上，但是可以通过实例访问到，即通过原型链查找到

2.3 遍历实例对象属性的三种方法
1）for ... in ... ：遍历实例对象自身和原型链上的属性
2）Object.keys() 和 Object.getOwnPropertyNames() ：遍历实例对象自身属性
3）hasOwnProperty() 判断属性是不是实例对象自身的属性

3.es6后的封装  --  class
3.1 使用class，会默认调用constructor函数，可以接受参数，没有定义，会隐式生成constructor

3.2 class中集中定义属性的区别
class可以理解成也是构造函数，使用的是constructor构造
1）私有属性和方法，在constructor中使用var定义的变量，只在constructor中被使用
2）公有属性和方法，有3种情况
    在constructor中使用this设置的属性和方法，被定义到实例上
    在class中，使用 = 定义的属性和方法，被定义到实例上
    在class中，函数声明定义一个方法，被添加到原型对象prototype上
3）静态属性和方法，使用static定义的属性和方法，被添加到类本身