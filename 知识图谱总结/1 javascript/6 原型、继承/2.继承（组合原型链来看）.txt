1.继承和原型链相关概念：
一般对象的__proto__属性指向其构造函数原型对象的prototype，在prototype上，存在constructor属性指向构造函数本身
解释：一般对象也就是实例对象，一般会有这样的用法，使用constructor属性访问其构造函数，实际这就是原型链的路径，实例对象访问constructor，实际访问到的是其构造函数原型对象上的
而且，一般对象是通过constructor new出来的

2.基于原型链和构造的继承与类继承的比较（这里实际应该是封装的比较）
2.1 js继承的理解：
从js的角度来看继承问题，更多关注的是对象由类或者构造实例化，继承类的方法和属性，或者沿原型链继承构造方法和属性，继承体现在沿类查找或者沿原型链查找（也就是继承存在于对象到对象），这一点和其他语言类和类之间的继承关系关注点不太一致，这样更易理解
2.2 es新特性class：类的职责是充当创建对象的模板
2.3 两种继承的比较：
      基于class的继承，继承的是行为和结构，没有继承数据（类和类之间的继承）
      基于prototype和constructor的继承，可以继承数据，结构和行为（构造和构造之间的继承）
2.4 两种继承原理比较：class-based   vs   prototype-based
    1）class -> class之间存在继承关系，object基于某个已完成继承关系的class模板所创建
    2）object -> object之间存在继承关系，object可以由各种方式创建，可以在创建时继承对象，或者在创建后修改继承对象

3.思考class的本质
3.1 总结：其实js类的写法，仍是一种基于原型和构造的语法糖

4.自己的总结：
js的继承是对象和对象之间的继承，这样的继承，需要原型和原型链的支持
在继承时，将描述对象的公共属性和方法（不会发生变化），放入prototype中，这样创建的实例对象就都能获取这些公共的属性和方法，针对对象特有的属性（根据对象不同而不同），放入构造函数中，如可以在实例化对象时传参，保证不同实例之间的特性
es6实现的类和继承，其实本质也是基于原型和构造的语法糖
