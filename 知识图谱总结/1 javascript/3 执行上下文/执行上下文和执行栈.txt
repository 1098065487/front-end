理解：
执行上下文：js代码执行时，所在环境的抽象，函数就是在执行上下文的环境下执行的，可以简单理                   解为函数执行前的准备
执行上下文栈：当存在多个函数时，就会有多个执行上下文，执行上下文栈就是管理多个执行上下              文的工具，遵循先进后出的栈结构（当多个函数嵌套，最外层先进栈，最后执行完出栈）

每个执行上下文，都有三个重要属性：
1）变量对象
2）作用域链
3）this

执行上下文的生命周期：创建阶段 -> 执行阶段 -> 回收阶段
1.创建阶段：当函数被调用，还没有被执行
1）创建变量对象，初始化函数的参数，提升函数声明和变量声明
2）创建作用域链，开始会使用函数内部存储的父变量对象层级链作为初始作用域链，变量对象创建后，会将变量对象附到初始作用域链前端，形成完整的作用域链
3）确定this指向

2.执行阶段：执行变量赋值，执行代码
3.回收阶段：执行上下文出栈，等待被回收

如何确定this的指向：
this的指向在执行时才能确定，在定义时，不能确定（this是执行上下文的一部分）
1）直接调用函数，this一定是全局对象window
2）谁调用函数，this就指向谁
3）调用构造函数时，this指向当前类的一个实例
4）call, apply, bind方法中，this指向第一个参数（这三个方法主要就是为了改变this的指向）
5）箭头函数没有this，函数调用的外层有函数，this就指向外层函数的this，如果没有，就指向window

执行上下文栈：
1）javascript执行在单线程上，所有代码都是排队执行
2）一开始浏览器执行全局代码时，首先创建全局的执行上下文，压入执行栈的栈顶
3）执行代码逻辑时，每进入一个函数执行，就会创建一个函数的执行上下文，并压入执行栈，当完成时，该函数的执行上下文出栈，出栈后等待被垃圾回收
4）由于js单线程，js执行引擎总是会访问栈顶的执行上下文，栈内先进后出
5）全局上下文只有唯一的一个，在浏览器关闭时出栈