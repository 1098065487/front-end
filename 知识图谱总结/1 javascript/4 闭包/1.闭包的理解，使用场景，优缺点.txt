1.理解：
函数执行后返回结果是一个内部函数，并被外部变量所引用（函数必须执行），如果该内部函数持有被执行函数作用域的变量（执行函数返回的函数上可以访问到执行函数中的变量），即形成了闭包

特点：可以在内部函数（返回的）访问到外部函数（定义执行的）作用域
场景：1）使用闭包读取函数中的变量
          2）使用闭包将函数中的变量存储在内存中，保护变量不被污染
注意：闭包会将函数中的变量存储在内存中，对内存有消耗，不能滥用，会影响性能，可能造成内            存泄漏，当不需要使用闭包时，要及时释放内存，可将原赋值为内层函数的变量赋值为null

2.闭包原理：（或者说是过程描述）
函数执行分成两个阶段，预编译阶段和执行阶段
1）在预编译阶段，如果发现内部函数使用了外部函数的变量，则会在内存中创建一个闭包对象（也就是变量对象）并保存对应变量值，如果已存在闭包，则需要增加对应属性值即可
2）执行完后，函数执行上下文会被销毁，函数对闭包对象的引用也会被销毁，但其内部函数还持有该闭包的引用，所以内部函数可以继续使用外部函数中的变量

原理：利用了函数的作用域链，内部函数会将外部函数的变量对象添加到自己的作用域链中，外部函数返回了内部函数，这样即使外部函数执行完，内部函数仍然存在，其作用域链上的外部函数的变量对象也就存在

3.优缺点：
1）优点：1.可以通过内部函数访问外部函数作用域中的变量，且常驻内存中，可供之后使用
              2.避免变量污染全局变量（类似功能的方式就是定义一个全局变量使用）
              3.将变量存到独立的作用域，作为私有成员存在，实现了私有化
2）缺点：1.对内存消耗有负面影响，内部函数保存了外部函数变量的引用，无法被垃圾回收，有内                 存泄露的风险
               2.对处理速度有负面影响，闭包层级决定了对外部变量的引用在查找时经过作用链的长度
               3.可能获取到意外的值（captured value）

4.应用场景：
1）典型的场景是模块封装，可以防止变量污染全局
var fc = (function() {
  var foo = 0;
  function inner() {
    return foo;
  }
  return inner;
})();

2）在循环中创建闭包，防止取到意外的值
常见于for循环中，针对循环次数变量i，若在循环中需要使用，需要针对i做闭包处理（一般是添加立即执行函数），不然对于循环中i永远是循环的最后一个值

从这点上看，let及其块级作用域已经实现了该需求
