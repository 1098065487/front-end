js闭包本质来源于两点：词法作用域（理解为作用域链更好）和函数当作值传递

1）词法作用域，也就是js代码执行的作用域，这其中就规定了内部函数可以访问函数外面的变量，js引擎时通过数据结构和算法底层表示一个函数，以满足词法作用域的规则，这样，可访问的函数外的变量，会登记在相应的数据结构中

2）函数作为值传递，函数是js中的一等公民，啥都可以做，可以作为一个值来赋值或作为函数返回值，当函数作为一个函数返回值时，其实就相当于返回了一个通道，可以通过这个通道去访问这个函数词法作用域的变量

结合1）和2），内部函数的词法作用域在外部函数执行时创建，外部函数执行完销毁，但是内部函数作为返回值出去了，使得内部函数的词法作用域上的变量都会保存，无法直接访问，必须通过返回的内部函数访问，具有了私有性

闭包的形式：
函数中定义一个内部函数，该内部函数有使用函数中的变量作为自身的词法作用域，函数执行后返回这个内部函数，即形成闭包
特点：可以通过返回的这个内部函数，去访问之前定义的函数中的变量