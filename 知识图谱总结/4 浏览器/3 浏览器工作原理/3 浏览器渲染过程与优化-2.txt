6.defer和async的区别：
1）不加任何属性的script标签内容会在加载后立即执行，同时挂起当前的dom解析，直至执行完毕
2）添加async的，不会阻塞dom解析，js加载执行和dom解析并行执行
3）添加defer的，不会阻塞dom解析，但是js执行在dom解析完成后，DomContentLoaded事件触发前完成

总结：
1）defer和async在网络读取（下载）这块是一样的，都是异步（相对于html解析）
2）两者的差别在于下载完何时执行，async下载完即执行，defer下载后在dom解析完执行
3）多个defer执行会按加载顺序执行，多个async则是乱序，谁先加载完谁即执行

7.浏览器的回流与重绘：
回流必将引起重绘，重绘不一定引起回流
回流意味着dom尺寸，结构或者设计尺寸结构的属性变化时，浏览器重新渲染
重绘指不影响dom的位置结构尺寸的样式变化，浏览器的重新绘制
回流比重绘的代价更高，因为影响到dom树的结构或dom节点的位置大小了
避免回流、重绘的方案：
1）css:
1>避免table布局
2>尽可能在dom树末端改变class
3>避免设置多层内联样式，会遍历查找
4>将动画效果批到固定位置的元素上（absolute，fixed）
5>避免使用css表达式

2）js：
1>js样式修改一次完成，不频繁操作
2>避免频繁操作dom，创建documentFragment，将dom操作转移到其上，最后添加进dom
3>类似2>，可以将要操作的dom设为display: none;，操作完再修改回去，也会减少回流次数，但是不如2>效果好，文档片段仅触发一次，display: none;会触发两次
4>缓存要频繁使用的会引起回流或重绘的属性使用

8.什么是渲染层合并？
对于页面中dom元素的绘制是在多个层上进行的，每个层完成绘制后，会将绘制的位图发送给GPU绘制到屏幕上，将所有层按照合理的顺序合并成一个图层，展现在屏幕上，这个过程就叫渲染层合并