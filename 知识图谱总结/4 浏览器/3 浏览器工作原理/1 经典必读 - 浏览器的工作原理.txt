原文地址：https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/

1.浏览器的高层结构：
1.1 用户界面
1.2 浏览器引擎
1.3 呈现引擎
1.4 网络
1.5 用户界面后端
1.6 javascript解释器
1.7 数据存储
理解：浏览器用户界面由浏览器引擎接受用户指令，传送给呈现引擎处理展示，呈现引擎会解析html和css，由网络获取js文件，由js解释器解析执行js代码，从而处理得到最终结果，通过浏览器引擎反馈到用户界面

2.呈现引擎（渲染引擎）的工作：
一句话总结：主要显示使用css格式化的html内容和图片
详细理解：
渲染引擎解析html构建dom树，解析css形成cssom，结合形成render tree，经过layout（回流，重排一样的操作）获取位置，通过paint（重绘一样的操作）绘制到屏幕

基本流程：
1）解析html文档构建DOM树（内容树）
2）根据上一步的css样式数据，构建呈现树
3）布局呈现树（给每个节点分配确切坐标）
4）绘制呈现树（呈现引擎遍历呈现树，由用户界面后端绘制节点）

3.解析（将文档解析成节点树，或者叫dom树）
解析过程包括：词法分析和语法分析
3.1词法分析将文档分割成大量标记
3.2语法分析，词法分析器识别有效标记，解析器根据语法规则分析文档结构，构建解析树
3.3很多时候，解析树还不是最总结果，还会进一步编译，编译成机器代码（理解即可，不关注）

4.html解析（前面的解析是宏观的，全面综合的解析，这里是特定的html的解析）
html由于语言的容错性，不能严格的自上而下或者自下而上按顺序解析
html解析，有特有的标记化算法解析出词法，再由特有的树构建算法解读语法，构建出dom树

5.呈现树
5.1dom树构建的同时，呈现树也会构建，呈现树是文档的可视化表示，作用是使按照正确顺序绘制内容
5.2呈现树虽然和dom树元素相对应，但是并非一一对应，呈现树相当于dom树的实际显示，受可视化样式影响，一个经典的例子，dispaly: none;的不会显示在呈现树上（visibility: hidden会显示）
还有其他情况，呈现树和dom树结构不对应，如一个dom元素对应多个可视化对象，select元素一个dom节点对应三个呈现器，显示区域，下拉表，按钮；还有就是浮动定位和绝对定位，会让元素在呈现树的位置和dom树的位置不对应
5.3呈现树在构建时，一个重要的部分是样式计算，可以简单理解，呈现树是根据dom树和最终的样式计算结果组合得到的

6.布局（google浏览器称为布局，firefox称为重排）
呈现器在创建后添加到呈现树时，并不包含位置和大小信息，这些值的计算过程称为布局或重排

7.绘制
系统遍历呈现树，调用呈现器paint方法，将呈现器内容显示在屏幕上
绘制工作是使用用户界面基础组件完成的










