由简单的一个html和一个css文件的前端工程拓展：
1.直接丢到服务器，可访问页面，加载样式  ——>不够快，需要优化
开始优化之路：
2.添加协商缓存，使请求结果304，根据结果使用本地缓存  ——>还不够快
3.利用本地缓存（cache-control/expires），不与服务器通信直接使用本地缓存  ——>不更新资源
4.通过更新页面引用资源路径（添加?+版本标记），主动更新  ——>对多资源不友好
5.添加路径与文件按内容关联（数据摘要算法，理解成hash值）
6.进一步提升性能，静态资源部署cdn，资源引用改成部署路径  ——>新发布两者发布顺序干扰
7.非覆盖式发布（资源文件名使用摘要信息代替，不覆盖），先发静态资源，在部署页面

静态资源优化方案考虑：
1）配置超长时间的本地缓存  ——  节省带宽，提高性能
2）采用内容摘要作为缓存更新依据  ——  精准的缓存控制
3）静态资源cdn部署  ——  优化网络请求
4）更该资源发布路径实现非覆盖式发布  ——  平滑升级
