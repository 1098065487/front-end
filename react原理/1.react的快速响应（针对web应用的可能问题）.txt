web应用的快速响应痛点：
1.cpu瓶颈：遇到大计算量的操作，或者设备性能不足，导致页面掉帧，造成卡顿
2.IO瓶颈：网络请求后，需要等待数据返回才能进一步操作，即异步导致不能快速响应

react的处理思路：
将同步的更新变为可中断的异步更新
（允许牺牲一定的更新速度，保证交互的响应速度，使得交互更加自然）

1）针对cpu瓶颈
主流浏览器刷新频率为60Hz，即（1000ms/60Hz）16.6ms浏览器刷新一次，js执行和浏览器布局、绘制在这一帧的时间内，可能执行不完，就出现掉帧的情况

解决：在浏览器一帧时间中，预留时间给js线程去执行，源码中预留的时间是5ms，当预留的时间不能执行完一次js操作时，react等待下一帧的预留时间去继续中断的操作，保证浏览器布局和绘制的时间，减少掉帧的可能，这里将长任务拆分到每一帧去执行的操作，被称为时间切片

2）针对IO瓶颈
网络延迟是前端开发者无法解决的，在网络延迟客观存在的情况下，采用减少用户感知的办法去处理该问题

原理上可以理解，当触发接口请求后，在当前状态下短暂的停留一段是时间，用这段时间请求数据，如果这段时间接口返回了，则是无感知的，超过这段时间，则触发loading效果，避免loading一闪而过的情况

react实现了Suspense做组件的懒加载，使用配套的新hook useDeferedValue做UI上的延迟更新，让交互上更加流畅，源码内部，实际上也是做了将同步更新转为了可中断的异步更新









