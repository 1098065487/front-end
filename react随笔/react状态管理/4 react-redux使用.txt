1.首先，要想使用react-redux做状态管理，需要用react-redux提供的Provider组件包裹需要状态管理的组件，Provider上只有一个参数store
一般要么是createStore创建的，要么是configureStore配置的，这两个函数都由redux提供，createStore的参数是combineReducers的reducer，configureStore的参数可以是reducers的组合

2.对于reducer，可以理解成数据源和改变数据源方法的组合
一般combineReducers时，配置reducers的k-v对，key即为整个组件state可使用数据的键名
对于每个reducer，一般只关注自己的数据处理，reducer纯函数的参数为state和action，这里action包括type和其他参数，根据type不同，switch case做不同处理，总是返回一个新的state

在实际使用中，一般reducers文件夹下，index.js作为combine，其他reducer关注自己的数据处理

3.数据实际处理在reducer，触发数据的处理，却是在action，在action中一般配置好请求的type和其他参数（形参），作为方法的返回值，供dispatch使用
其实也可以不用配置action文件，在需要触发请求处理的dispatch时，直接写也不是不行

4.连接组件和数据源，通过react-redux提供的connect方法，connect函数的立即执行函数的参数为被包裹的组件，connect方法的参数主要为可选的mapStateToProps，mapDispatchToProps
1）定义了mapStateToProps参数，则组件会监听store的变化，变化则mapStateToProps函数会被调用，其参数为state和ownProps，必须有对象返回值，返回的对象被合并到组件的props，这样在被connect包裹的组件内props，就可以使用数据源store中的专属模块对象了
2）定义了mapDispatchToProps，若他是一个函数，则接受dispatch和可选的ownProps参数，返回的对象被合并到组件的props
注意，这两个参数函数的参数ownProps都是上层组件传入当前connect的组件的props，可能需要用到上层的props就用这样的方式处理（第二个参数）

理解：这里连接数据源和组件，更多的是为了当数据源变动时，触发页面重新渲染，主力为mapStateToProps，dispatch会跟随connect传入到组件内props，所以mapDispatchToProps其实可以写进组件内，除非需要用到connect组件的上层props，通过第二个参数ownProps来调用

