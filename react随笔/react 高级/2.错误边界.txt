解决问题：
部分UI的错误，不应该导致整个应用崩溃，可以在错误时捕获错误并渲染出备用UI

错误边界无法捕获的错误：
1.事件处理
2.异步代码
3.服务器渲染
4.自身抛出的错误

使用：
在class组件中，定义了static getDerivedStateFromError()或componentDidCatch()这两个生命周期方法中的任意一个或两个时，他就变成一个错误边界，一般使用static getDerivedStateFromError()渲染备用UI，使用componentDidCatch()打印错误信息
然后使用这个错误边界组件包裹常规组件，当常规组件错误被捕获后，就展示备用UI

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null, errorInfo: null };
  }
  componentDidCatch(error, errorInfo) {
    this.setState({
      error: error,
      errorInfo: errorInfo
    })
  }
  render() {
    if (this.state.errorInfo) {
      return (
        <div>
          <h2>Something went wrong.</h2>
          <details style={{ whiteSpace: 'pre-wrap' }}>
            {this.state.error && this.state.error.toString()}
            <br />
            {this.state.errorInfo.componentStack}
          </details>
        </div>
      );
    }
    return this.props.children;
  }  
}