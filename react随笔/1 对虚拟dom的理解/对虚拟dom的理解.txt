1.虚拟dom的理解：
本质上，虚拟dom是一个js对象，详细点，虚拟dom是一个可以表示dom树形结构的特殊js对象

原生dom对象是树形结构，其中浏览器厂商实现了众多的规范（html属性，dom事件等），创建及操作代价昂贵，虚拟dom是一个简单的包含tag，props，children三个属性的对象，也是树形结构

虚拟dom提升性能的点在于，dom发生变化的时候，通过diff算法对比js原生dom，计算出需要变更的dom，然后通过虚拟dom进行操作，而不是更新整个视图

虚拟dom最大的优势在于，抽象了原本的渲染过程（原生dom操作），实现了跨平台，使渲染不仅仅局限于浏览器的dom，还可以对安卓，ios的原生组件，乃至小程序和其他GUI的渲染

2.虚拟dom的使用：
1）js代码转为虚拟dom
2）虚拟dom渲染成真实dom，并插入对应节点，更新到页面

1）js代码转为虚拟dom：
主流虚拟dom库，都有一个h函数去完成此功能，在react中类似功能实现是React.createElement，vue中是render方法中的createElement，h函数接受三个参数，分别是dom元素的标签名，属性，子节点，最终返回一个虚拟dom对象
react通过babel将jsx转换成h函数渲染的形式（即将jsx转为js代码虚拟dom格式），vue是通过vue-loader将模板转换成h函数渲染的形式（即将模板转换为js代码虚拟dom格式），也就是说jsx并不是和虚拟dom密不可分，甚至可以在vue中通过插件使用jsx，能转换成虚拟dom格式的js即可

2）渲染虚拟dom
简单来说，对虚拟dom进行递归调用，创建标签，添加属性，添加子节点直至完成，即可获得虚拟dom对应的真实dom，再插入对应节点，即可更新页面

3.diff算法（新老虚拟dom的对比算法）
使用diff算法，比较新老虚拟dom的变化，将变化更新到视图，代码上就是一个diff函数，返回一个patches
