使用react hook，让对象这个概念继续细分，数据，行为及两者之间的关联分成三个维度去处理，不像class将其绑定在对象中

hook中，数据可以单独声明（useState），行为可以单独声明（useEffect），数据和行为可以可选关联（custom-hook），数据可以组合，行为可以组合，数据和行为可以组合后再度组合，这样的维度可以实现横向和纵向的自由度拓展

对比下，class写法则是由类及对象绑定了数据和行为，行为逻辑需要依赖生命周期，数据处理需要统一的状态管理

当然，不能说class写法就不好了，实际上，类的写法更符合思考，hook写法更适合复用，都是有其优缺点的，只是因为class确实存在某些问题，才推动了hook的发展


hook和class组件的区别方向
1.数据（状态同步），hook组件实际就是函数，满足了闭包的要求，从数据上来看，没有先后状态，永远只有即时状态，而class组件则是类，有对象的概念，他的数据是存在先后状态的，state是更新的，一个典型的延时点击例子，hook组件是点击当时的值，class则是延时后的当下值（可以通过将方法放入render()中，保证数据是未渲染前的）
2.对于生命周期，class组件的状态，可以用生命周期来解释，hook组件没有生命周期，永远是最新的即时状态，hook可以模拟生命周期，但实际人家本质上不是这样，hook使用useEffect，通过依赖来模拟生命周期的变化，这也让hook组件变得复杂，特别是多个依赖的情况下，hook组件反而没有class组件来的清晰明了
3.性能优化，hook相对更简单点，避免不必要的渲染，class组件要去比较前一个props和当前props有没有变化
4.代码复用，也是明显的hook组件更优秀，毕竟人家就是个函数，class组件则相对麻烦，一般使用高阶组件（HOC）（组件作为参数被另一个组件使用）或render props（返回组件的函数作为另一个组件的属性）的方式，高阶组件和render props可以相互转化