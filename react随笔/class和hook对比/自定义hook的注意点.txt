1.自定义hook组件一般是方法的抽离，依赖于传参不同各处引用不同，针对于传参，有一个注意点

由于组件会跟随dom变化而去重新加载，比如页面表单元素value发生change
    1）在class组件中，体现为render函数重新调用一次，并不会干扰到生命周期函数，所以不会有问题（react选择更新，并不是全部更新）
    2）对于hook函数组件，重新加载意味着函数重新调用（整体重新调用，但只是重新生成属性和方法，也不会直接影响），此时如果使用了自定义的hook组件，针对传参有注意点：

        针对于object类型的参数，在函数重新调用时，会重新赋址，值没变，却会识别为变化。

在此场景下，本组件引用的自定义hook组件中的方法，由于参数变化，方法相当于重新创建（此时还没有太大问题），若此时本组件的useEffect方法中，有依赖于hook组件中的方法去做页面处理（如调用接口渲染页面），会因为自定义hook组件方法重新创建而触发，进而页面变动，由于页面变动，会继续触发hook函数重新调用，从而出现死循环的情况。

    针对这种情况，最优的办法是对传入自定义hook中的参数做检查处理，当参数为object类型时，添加useMemo函数，检查对象内部的值，仅当内部值变化时，触发参数变化，自身重新加载时能识别到没有变化。