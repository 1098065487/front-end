1.父传子：
父组件传值给子组件相对比较简单，通过props，子组件即可获取父组件传过来的值。

2.子传父：
子组件传值给父组件，需要父组件提供：state状态值 及 获取值变化的方法（接受函数）
子组件接值为初始状态值，自身变化时，调用获取的父组件状态值变化方法，将状态值变化传回父组件。

子组件传值给父组件，针对form表单比较常见，表单元素为子组件，一般父组件提供初始值，在子组件自身变化的同时，调用父组件传入的方法，将变化值传回父组件。
这里针对子组件，会存在两种情况：
    1.子组件接受父组件的初值只会在初次渲染时发生，往后子组件的值自己决定，并返回父组件
    2.子组件一直可以接受父组件的值传入，父变子变，同时子组件变化，可能要求父组件变化

针对1的情况，也是在form表单比较常见，表单元素提供初值，并且默认有onChange()方法，子组件变动时，在自身的value传入onChange()即可。（非表单元素，自己提供change方法）

针对2的情况，考虑父变子变，需要使用static getDerivedStateFromProps()生命周期，同时第一次渲染时的constructor()生命周期赋初值也不能省略。写法：
static getDerivedStateFromProps(props, state) {
    if (props.value !== state.prevData) {
      // 当外面父组件默认值变化时，里面初始props的值需要变化改变state

      return {
        prevData: props.value,    // 此参数仅作为判断
        //  可以在这里定义子组件所需初值
      }
    }
    return null;
  }

注：使用值来做判断，实际存在风险，当父组件切换默认值时，值一样的时候，就会有bug出现，可以参考下处理（比如用id做唯一判断）：
https://juejin.im/post/6844903760305602568
