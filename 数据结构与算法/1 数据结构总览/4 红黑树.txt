1.概念：
红黑树是一种自平衡二叉查找树（也就是一种二叉平衡树，比如AVL树），是一种高效的查找树，最开始发明时叫对称二叉B树，后来被修改成红黑树。
红黑树具有良好的效率，可以在O(log n)时间内完成查找、增加、删除等操作，业界应用广泛，比如java中的TreeMap，jdk1.8中的HashMap等，都是基于红黑树结构实现的。

2.特性：
1）节点是红色或者黑色的，根节点是黑色的
2）叶子节点到null（即NIL节点，空节点），都是黑色的
3）每个红色节点的两个子节点都是黑色的（即每个根到叶子节点的路径上，不能有连续的红节点）
4）从任一节点到其每个叶子节点的路径包含相同数目的黑色节点
分析：
    由3）可以知道：根到叶子节点的路径，不能出现连续的红色节点。则最短的可能路径都是黑色节点，最长的可能路径是交替的红黑节点，再有4）可以得出，根到叶子节点的路径，最长的不多于最短的两倍长。
    这样，这个树在大致上是平衡的，因为对于二叉查找树，操作比如插入、删除、和查找某个值的最坏情况与树的高度成正比，这样的高度差，理论上允许红黑树在最坏情况下仍是高效的。

3.操作
1）左旋右旋和AVL树一样（二叉平衡树的自平衡左旋右旋）

2）插入：（以红色节点插入，再进行变色旋转调整）有5种情况
1》插入的新节点是根节点，直接颜色由红变黑
2》插入节点的父节点是黑色，不需要调整
3》插入节点的父节点是红色（祖父节点必然为黑色），若其叔叔节点也是红色，将父节点和叔叔节       点转为黑色，将祖父节点转为红色，但此时祖父节点可能会与其父节点形成连续红色节点，需要       继续向上调整
4》插入节点的父节点是红色，若其叔叔节点是黑色，插入节点是父节点的右子节点，父节点是祖父     节点的左子节点，对父节点做左旋操作，再向上调整
5》插入节点的父节点是红色，若其叔叔节点是黑色，插入节点是父节点的左子节点，父节点是祖父     节点的左子节点，对祖父节点做右旋操作，再向上调整
说明：
这里的4》5》操作，实际上不是直接插入节点产生的，而是在3》过程中产生的（很好理解，作为可以插入的叶子节点，不可能出现一个红色一个黑色的情况，会导致路径上黑色节点数不一致的情况），并且4》5》中只考虑了父节点是祖父节点左子树的情况，因为相反的情况类似相反处理即可

3）删除：（虽然大概能看懂，但是为什么这样做还是不懂，导致记不住）
普通搜索树的删除过程：（AVL都类似，多了额外的再平衡）
1>叶子节点直接删除（父节点儿子指针设null）
2>仅一个子节点，删除该节点，将其子节点指向父节点儿子指针
3>两个子节点，为保证二叉搜索树结构，选择左子树最大值或右子树最小值，将值赋给待删除节点，再删除这个节点，由于左右子树最大最小值为叶子节点，可以1>简单删除
（左子树最大值即为左子树的最深层右子节点，右子树最小值即为右子树的最深层左子节点）

删除思想：
还是按照普通二叉搜索树简化删除操作，并不断再平衡使符合红黑树特性
A.若删除的是叶子节点，且为红色，则无需修复
B.若删除的是叶子节点，且为黑色，则需要想办法修复
C.若删除的节点（P）存在一个子节点（S），可将删除节点和子节点值交换，将删除节点变成删除    其唯一子节点，可将C转换成A，B两种情况
    C1：P为黑色，S为红色，则转换成A
    C2：P为黑色或红色，S为黑色，则转换成B
D.若删除的节点又两个子节点，可将删除节点（P）与其后继节点（N）值交换，将删除节点变成删    除其后继节点，可将D转换成ABC三种情况
    D1：N是叶子节点，对应A，B
    D2：N只有一个子节点，对应C

所有的情况调整都会到B，针对B分析：
1》当前节点（待删除节点）是左节点的情况
1.兄弟节点是黑色，且其只有一个右节点（由性质推必红）
步骤：1删除当前节点
          2父节点颜色赋给兄弟节点
          3父节点和兄弟节点的右子节点设为黑色
          4对父节点左旋
2.兄弟节点是黑色，且其只有一个左节点（必红）
步骤：1将兄弟节点的左节点设为黑色
          2将兄弟节点设为红色
          （1，2操作相当于交换兄弟节点和其左节点的颜色）
          3对兄弟节点做右旋，其结果变成情况1，可后续操作
3.兄弟节点是黑色，并且其有两个节点（都必红）（和情况1操作步骤一致）
步骤：1删除当前节点
          2将父节点颜色赋给兄弟节点
          3将父节点和兄弟节点的右节点设为黑色
          4对父节点左旋
4.兄弟节点是黑色，且没有子节点（有一说一，递归操作没看懂）
步骤：1删除当前节点
          2将兄弟节点设为红色
          3将父节点作为当前节点，向上类似递归，直到根节点或者遇到红色节点
5.兄弟节点是红色（其必有两黑色子节点）
步骤：1删除当前节点
          2将兄弟节点设为黑色
          3将兄弟节点的左节点设为红色
          4对父节点左旋

2》当前节点（待删除节点）是右节点的情况（可以和左节点情况类别，一样的操作）
1.兄弟节点是黑色，且其只有一个左节点（必红）
步骤：1删除当前节点
          2将父节点颜色赋给兄弟节点
          3将父节点和兄弟节点的左子节点都设为黑色
          4对父节点右旋
2.兄弟节点是黑色，且其只有一个右节点（必红）
步骤：1将兄弟节点的右子节点设为黑色
          2将兄弟节点设为红色（颜色交换）
          3对兄虎节点左旋，其结果变成情况1，可后续操作
3.兄弟节点是黑色，且有两个节点（必都红）（操作步骤和情况1相同）
步骤：1删除当前节点
          2将父节点的颜色赋给兄弟节点
          3将父节点和兄弟节点的左子节点都设为黑色
          4对父节点右旋
4.兄弟节点是黑色，且没有子节点
步骤：1删除当前节点
          2将兄弟节点设为红色
          3将父节点设为当前节点，并向上递归，直到根节点或遇到红色节点
5.兄弟节点是红色（其必有两个黑色的子节点）
步骤：1删除当前节点
          2将兄弟节点设为黑色
          3将兄弟节点的右子节点设为红色
          4对父节点右旋
