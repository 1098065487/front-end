1.语法：值 as 类型

2.用途：
2-1.将联合类型断言成其中确定的某个类型，从而在调用特定类型属性时，不报错
（断言只是在编译阶段处理，编译通过，运行不一定通过，滥用会出问题）

2-2.将父类断言成更具体的子类

2-3.将一个任意类型断言为any（断言为any后能添加子属性，如widows对象添加属性，需断言下）
这一点在js中常有问题，比如某个属性期望他是数组，并且接下来会使用push()方法，得一开始就直接定义属性为空数组，复杂一点的，数组属性中需要创建某个字段为数组，做一个遍历判断，不为数组是创建数组，后面再用push()，在ts中则可以直接断言使用。（还是不太一样，ts断言只是编译阶段的处理，我定义好空数组，调用push仍提示错误的情况下，用断言，如果未定义，断言后，编译不报错，运行应该还是会报错。。。）

2-4.将any断言为一个具体的类型

3.类型断言只是在编译阶段处理编译时类型校验不通过的情况，做了处理也不会对运行产生影响
   要想运行时类型校验也通过，需要做的是，类型转换

4.类型断言和类型声明很类似，在使用子类型赋值给父类型时，表现一致。
      类型断言，需要满足A兼容B，或者B兼容A
      类型声明，需要满足子兼容父
    所以，在写子类型赋值到父类型上，表现完全一致，但是断言还可以用在父类型赋值到子类型上
    类型声明比类型断言更加严格


