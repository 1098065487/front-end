1.在TypeScript中，引入了接口（Interfaces）来定义对象的类型。
       理解为：描述对象的形状（Shape）

TS类型支持，包括  基本类型  和  对象类型  的支持，基本类型和JS基本类型一样，直接使用就好，对象类型，通过引入接口来描述对象的形状，从而方便使用。
interface Person {
    name: string;
    age ?: number;
}
let tom: Person = {
    name: 'tom',
    age: 25
}

2.定义对象类型变量时，变量内属性必须和接口定义保持一致，可以通过可选属性（?:）不完全匹配

3.接口定义内可定义任意属性，这样可以在定义变量时，可以使用额外的属性，但是有要求：
      所有确定属性和可选属性的类型必须时任意类型的子类型
    （可以理解为任意属性肯定会囊括接口内任意类型的属性才对）
interface Person {
    name: string;
    age ?: number;
    [PropName: string]: any;
}
let tom: Person = {
    name: 'tom',
    gender: 'male'
}

4.只读属性：在接口内使用readonly 定义属性为只读，但是一旦只读后，此接口类型下的变量，该                     属性值在创建初始化时固定且只读
        且若在创建变量初始化后再试图改变值，则会报错。
        可以理解为readonly的接口属性，仅能在初始化时赋上值，并不能再被改变。