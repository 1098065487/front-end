1.类型别名：使用type来定义一个类型的新名字，多用于联合类型指定别名
type Name = string;
type NameResolver = () => string;
type NameOrResolver = Name | NameResolver;
function getName(n: NameOrResolver): Name {
    if(typeof n === 'string') {
        return n;
    } else {
        return n();
    }
}

2.字符串字面量类型：有一种类型，字符串字面量类型，需要先用type定义后再使用，表示约束取值只能为某几个字符串中的一个。
type EventNames = 'click' | 'scroll' | 'mousemove';
function handleEvent(ele: Element, event: EventNames) { ... }

3.元组：
合并相同类型的对象叫数组，合并不同类型的对象叫元组。
let tom: [string, number];
tom = ['tom', 25];
可以继续往元组里面添加越界的新元素，但是必须是元组内每个类型的联合类型
tom.push('male');    // 不报错
tom.push(true);      // 报错，类型必须为 string | number

4.枚举：枚举类型用于取值限定于一定范围的场景
enum colors { red, bule, green };
1）枚举类比于数组， 枚举值和枚举名双向映射，colors[0] === 'red'，colors['red'] === 0
注意：枚举值是0，1，2，枚举名是red，blue，green
2）可以给枚举手动赋值，未手动赋值的枚举项会在上一个手动赋值的基础上递增，哪怕重复，覆盖
这里覆盖是值覆盖，根据值找名的，会找到后面的，根据名找值则无所谓覆盖
枚举值也可以不是数字，但是在ts里需要使用 <any>值 的形式，无视类型检查
手动赋值小数时，也继续递增1
3）枚举可以是计算所得项，但是计算所得项后面不能出现未手动赋值的项
枚举的具体用处和有点几乎没有遇到过，算是待总结的内容吧，感觉不一定需要用到
