1.概念：
泛型（Generics）是指，在定义函数、接口或类的时候，不预先指定具体的类型，在使用的时候才再指定类型的一种特性。

2.常见用法：
在函数、接口、类的定义时，在函数名、接口名、类名后面使用<T>作为泛型声明，就可以在函数的参数和返回值类型，接口和类的内部，使用T作为泛型类型约束
当需要有多个泛型的属性时，也是可以支持的<T, U>这种形式的

3.给泛型添加约束
泛型使用extends关键字，继承接口或去其他泛型，实现泛型添加约束
interface Lengthwise {
    length: number;
}
function loggingIdentity<T extends Lengthwise>(arg: T): T {
    console.log(arg.length);
}

4.泛型函数：
function createArray<T>(length: number, value: T): Array<T> {
    let result: T[] = [];
    for(let i = 0; i < length; i++) {
        result[i] = value;
    }
    return result;
}
createArray(3, 'x');

5.泛型接口：
interface CreateArrayFunc<T> {
    (length: number, value: T): Array<T>;
}
let createArray: CreateArrayFunc<any> = function<T>(length: number, value: T): Array<T> { ... }
createArray(3, 'x');

6.泛型类：
class GenericNumber<T> {
    zeroValue: T;
    add: (x: T, y: T) => T;
}
let myGenericNumber = new GenericNumber<number>();
myGenericNumber.zeroValue = 0;
myGenericNumber.add = function(x, y) { return x + y };
注意要一直提醒自己，接口和类的类型支持只提供了类型，并没有实现，还是要自己声明后，再实现

7.泛型参数可以指定默认类型：
指定默认类型后，如果在使用时没有直接指定类型参数，从实际参数中也无法推测出类型时，默认类型就会生效
function createArray<T = string>(length: number, value: T): Array<T> { ... }