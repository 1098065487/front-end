1.情况：
1）自适应最优解肯定是栅栏布局，但是对设计要求较高，很多情况下，设计师也未能给到合适的应用栅栏布局的设计，可以的话，倒是可以自己设计一套自定义的栅栏布局样式使用（bootstrap框架有点大）。
2）通过媒体查询的方式，来适配页面，最后效果肯定是最好的，但是工作量的代价比较大，后期维护也比较繁琐，相当于在写多套页面了（而且可能是一个页面的多套页面，所以一般是栅栏布局+媒体查询混合），页面实现质量要求高的情况下，才建议这样写。
3）rem适配，优点就是工作量小，速度快，缺点也明显，根据设备宽度缩放时，设备差异明显时，缩放起来存在部分过大过小的可能，页面质量可能比较差（可以通过提前沟通设计要求，减小些页面差异）
4）顺便提一下，如果仅针对移动端，倒是有viewport，vw，rem，rem+vw多种方案（一般写静态页面都会考虑pc和mobile两端，也没详细看，粗略了解）

2.现使用：
目前自己写静态页面的主要方法是rem适配，移动端和PC端两套设计在同一个页面，通过媒体查询设备宽度来显隐展示，图片资源使用懒加载的策略，对加载速度也影响不大（公司现状的最优解，保证适配，开发速度，页面效果，页面加载速度）。
前面说过rem适配存在明显缺点，所以一般都提前建议设计师设计时：
      pc端基于大屏1920屏宽来设计，向下兼容较小屏宽的设备，同时注意设计时，基于1920屏字体大小较肉眼再小些（设计师设计图一般不会基于1920屏宽的电脑展开，存在视觉差），基本保证最大屏字体不会过大，但是小屏下，字体相对就小些（要求设计适度，自己开发时遇到过小，也适当放大些，目前设备分辨率普遍不错，所以也不会看不见的情况，基本满足要求）
      移动端基于375主流屏宽来设计，设计可以给到750设计图，目前移动端主流屏宽375，向上兼容414和向下兼容360效果都还算不错。唯一问题，移动端设计时，要考虑最小字号限制。

3.使用方式：
考虑到rem基于html的font-size来做的，为了方便计算，同时避免初次加载时页面元素初始渲染字号对页面的干扰，选用1rem=20px来做rem适配，计算为除2后往前一位小数，此时需考虑实际发布静态页面时，框架内是否存在rem干扰，如果有，需要将框架的部分rem转成px(一般可能存在header和footer干扰)，js中添加事件监听loaded，size变化，变动html的font-size，实现动态适配
