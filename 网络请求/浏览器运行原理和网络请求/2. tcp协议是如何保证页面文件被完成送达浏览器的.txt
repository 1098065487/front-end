背景：
在网络中，一个文件通常会被拆分成多个数据包进行传输，数据包在传输过程中又很有可能会丢失或出错，由此，保证页面文件完整被送达浏览器是有必要的

由3个方面展开：
1.数据包如何送达主机
2.主机如何将数据包转交给应用
3.数据是如何被完整的送达应用程序

数据包从主机A送到主机B，数据包会附加上一些信息，包括ip版本，源IP地址，目标IP地址，生存时间等，封装到ip头的数据结构中（这个应该算是ip协议的一部分）

TCP：传输控制协议（Transmission Control Protocol）
传输控制协议是一种面向连接的，可靠的，基于字节流的传输层通信协议，在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能
用户数据报协议（UDP）是同一层内另一个重要的传输协议

在英特网协议族中，TCP层位于IP层之上，应用层之下的中间层，不同主机的应用层之间经常需要可靠的，像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包去进行交换

TCP为了保证不丢失包的情况，给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。接收端实体对已成功接收的包发出一个相应的确认信息（ACK），如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就假设为已丢失并进行重传

数据在TCP层称为流，数据分组称为分段

TCP是一种面向连接的协议，在主机之间建立并维护虚拟连接，直到交换了一条消息或要在其上运行的程序交换的信息为止，数据包时TCP/IP网络上数据传输的最基本单位

TCP在传输层上运行，负责维护整个网络上可靠的端到端通信，IP是网络层协议，是传输层正下方的层，在传输层运行的有：UDP用户数据报协议，RTP实时传输协议，SCTP流控制传输协议



TCP协议的运作可以这样理解：
连接创建，数据传送，连接终止
1）连接创建，通过三次握手
2）数据传送，通过数据包+序号+确认号
3）连接终止，四次挥手

1.连接创建：TCP用三次握手过程创建一个连接
a.客户端向服务器发送一个SYN包，请求一个主动打开，该包携带（客户端设定）随机数A作为消息列号
b.服务器接受一个SYN包后，把该包放入SYN队列中，回送一个SYN/ACK，ACK的确认码应为A+1，SYN/ACK包本身携带一个随机产生的序号B
c.客户端收到SYN/ACK包后，发送一个ACK包，该包序号设定为A+1，而ACK的确认码为B+1，当服务器收到这个ACK包时，把请求帧从SYN队列中移除，放置到ACCEPT队列中

可能存在这种场景，在第三次握手时，客户端掉线了，则没有客户端的返回ACK，连接会既没成功也没失败，在一段时间内，服务器没有收到TCP，会重新发送SYN/ACK

2.数据传送：
每个TCP报文段中，都有一对序号和确认号
TCP报文发送者称自己的字节流编号为序号，称接受对方的字节流编号为确认号，通过序号和确认号，TCP层可以把收到的报文段中的字节按正确的顺序交付给应用层
使用序号的好处：序号标识了每端字节发出的字节顺序，接受端接收数据可以重建顺序，无视包的乱序交付和丢包

UDP(用户数据报协议)是把数据包送达程序的
UDP决定把数据包交给哪个程序，IP只负责把数据包传送到对方电脑

UDP：无连接，支持一对一，一对多，多对一，多对多交互通信，对应用层交付的报文直接打包，尽最大努力交付，所以不可靠，不使用流量控制和拥塞控制，首部开销小，仅8字节
TCP：面向连接，每一条TCP连接只能由两个端点，只能是一对一通信，面向字节流，可靠传输，使用流量控制和拥塞控制，首部最小20字节，最大60字节

UDP最重要的一点就是端口号，通过端口号把数据包分发给正确的程序，但是不保证可靠性



把TCP和UDP组合起来使用，就可以说明数据是如何被完整的送达到应用程序的，实际上，UDP也是一般被包含在TCP的概念里面的，所以说的是：
TCP就是把数据完整的送达应用程序
TCP是一种面向连接的，可靠的，基于字节流的传输层通信协议，提供重传机制，引入数据包排序机制（TCP头提供了排序的序列号，用来通过序号重新排数据包）


